{"version":3,"sources":["component/TodoTemplate.js","component/TodoInsert.js","component/TodoListItem.js","component/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["TodoTemplate","children","className","TodoInsert","onInsert","useState","value","setValue","onChange","useCallback","e","target","onSubmit","preventDefault","placeholder","type","React","memo","todo","onRemove","onToggle","style","uuid","content","completed","cn","onClick","prevProps","nextProps","todos","rowRenderer","index","key","width","height","rowCount","length","rowHeight","list","outline","App","setTodos","useEffect","a","fetch","response","json","fetchTodos","text","method","headers","body","JSON","stringify","rawResponse","newTodo","create","filter","remove","map","modify","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iPAYeA,G,MATM,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACpB,OACI,yBAAKC,UAAU,gBACf,yBAAKA,UAAU,aAAf,6BACA,yBAAKA,UAAU,WAAWD,M,QC0BnBE,G,MA7BI,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EACPC,mBAAS,IADF,mBAC1BC,EAD0B,KACnBC,EADmB,KAG3BC,EAAWC,uBAAY,SAAAC,GACzBH,EAASG,EAAEC,OAAOL,SACnB,IAEGM,EAAWH,uBACb,SAAAC,GACIN,EAASE,GACTC,EAAS,IACTG,EAAEG,mBAEN,CAACT,EAAUE,IAGf,OACI,0BAAMJ,UAAU,aAAaU,SAAUA,GACnC,2BAAOE,YAAc,kBACrBR,MAASA,EACTE,SAAYA,IAEZ,4BAAQO,KAAO,UACf,kBAAE,IAAF,U,yBCGGC,G,OAAAA,IAAMC,MApBA,SAAC,GAA2C,IAAzCC,EAAwC,EAAxCA,KAAOC,EAAiC,EAAjCA,SAAWC,EAAsB,EAAtBA,SAAUC,EAAY,EAAZA,MAC1CC,EAA6BJ,EAA7BI,KAAMC,EAAuBL,EAAvBK,QAASC,EAAcN,EAAdM,UAEvB,OACE,yBAAKtB,UAAU,2BAA2BmB,MAAOA,GACjD,yBAAKnB,UAAU,gBACb,yBAAKA,UAAWuB,IAAG,WAAY,CAAED,cAChCE,QAAS,kBAAMN,EAASE,EAAME,KAE5BA,EAAY,kBAAC,IAAD,MAAiB,kBAAC,IAAD,MAC9B,yBAAKtB,UAAU,QAAQqB,IAEzB,yBAAKrB,UAAU,SAASwB,QAAS,kBAAMP,EAASG,KAC9C,kBAAC,IAAD,YASN,SAACK,EAAWC,GAAZ,OAA0BD,EAAUT,OAASU,EAAUV,SCG1CF,G,OAAAA,IAAMC,MA9BJ,SAAC,GAAmC,IAAjCY,EAAgC,EAAhCA,MAAOV,EAAyB,EAAzBA,SAAUC,EAAe,EAAfA,SAC7BU,EAAcrB,uBAClB,YAA4B,IAAzBsB,EAAwB,EAAxBA,MAAOC,EAAiB,EAAjBA,IAAKX,EAAY,EAAZA,MACPH,EAAOW,EAAME,GACnB,OACE,kBAAC,EAAD,CACAb,KAAMA,EACNc,IAAKA,EACLb,SAAUA,EACVC,SAAUA,EACVC,MAAOA,MAIX,CAACF,EAAUC,EAAUS,IAEvB,OACE,kBAAC,IAAD,CACA3B,UAAU,WACV+B,MAAO,IACPC,OAAQ,IACRC,SAAUN,EAAMO,OAChBC,UAAW,GACXP,YAAaA,EACbQ,KAAMT,EACNR,MAAO,CAAEkB,QAAS,c,yjBCxBtB,IAyEeC,EAzEH,WAAO,IAAD,EACUnC,mBAAS,IADnB,mBACTwB,EADS,KACFY,EADE,KAGhBC,qBAAU,YACQ,uCAAG,8BAAAC,EAAA,sEACMC,MAAM,+CADZ,cACXC,EADW,gBAEEA,EAASC,OAFX,OAEXA,EAFW,OAGjBL,EAASK,GAHQ,2CAAH,qDAKhBC,KACC,IAEH,IAAM3C,EAAWK,uBACf,SAAAuC,IACc,uCAAG,8BAAAL,EAAA,sEACaC,MAAM,8CAA+C,CAC7EK,OAAQ,OACRC,QAAS,CACP,OAAU,mBACV,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CAAC9B,QAASyB,EAAMxB,WAAW,MAPrC,cACP8B,EADO,gBASSA,EAAYR,OATrB,OASPS,EATO,OAUbd,GAAS,SAAAZ,GAAK,4BAAQA,GAAR,CAAe0B,OAVhB,2CAAH,qDAYZC,KACC,IAECrC,EAAWV,uBACf,SAAAa,IACc,uCAAG,sBAAAqB,EAAA,sEACHC,MAAM,8CAAD,OAA+CtB,EAA/C,KAAwD,CACjE2B,OAAQ,SACRC,QAAS,CACP,eAAgB,sBAJX,OAQTT,GAAS,SAAAZ,GAAK,OAAIA,EAAM4B,QAAO,SAAAvC,GAAI,OAAIA,EAAKI,OAASA,QAR5C,2CAAH,qDAURoC,KACC,IAEHtC,EAAWX,uBACf,SAACa,EAAME,IACK,uCAAG,sBAAAmB,EAAA,sEACLC,MAAM,8CAAD,OAA+CtB,EAA/C,KAAwD,CACjE2B,OAAQ,QACRC,QAAS,CACP,OAAU,mBACV,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CAAE7B,WAAYA,MAP1B,OAUXiB,GAAS,SAAAZ,GAAK,OACZA,EAAM8B,KAAI,SAAAzC,GAAI,OACZA,EAAKI,OAASA,EAAd,KAAyBJ,EAAzB,CAA+BM,WAAYN,EAAKM,YAAcN,QAZvD,2CAAH,qDAeV0C,KACC,IAGL,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAYxD,SAAUA,IACtB,kBAAC,EAAD,CAAUyB,MAAOA,EAAOV,SAAUA,EAAUC,SAAUA,MC9DxCyC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.1c3353d1.chunk.js","sourcesContent":["import React from 'react';\nimport './TodoTemplate.scss';\n\nconst TodoTemplate = ({ children }) => {\n    return (\n        <div className=\"TodoTemplate\">\n        <div className=\"TodoTitle\">일정 관리</div>\n        <div className=\"content\">{children}</div>\n        </div>\n    );\n};\n\nexport default TodoTemplate;","import React, { useState , useCallback } from 'react';\nimport { MdAddBox } from 'react-icons/md';\nimport './TodoInsert.scss';\n\nconst TodoInsert = ({ onInsert }) => {\n    const [value, setValue] = useState('');\n\n    const onChange = useCallback(e => {\n        setValue(e.target.value);\n    }, []);\n\n    const onSubmit = useCallback(\n        e => {\n            onInsert(value);\n            setValue('');\n            e.preventDefault();\n        },\n        [onInsert, value],\n    );\n\n    return (\n        <form className=\"TodoInsert\" onSubmit={onSubmit}>\n            <input placeholder = \"Write down ToDo\"\n            value = {value}\n            onChange = {onChange}\n            />\n            <button type = \"submit\">\n            < MdAddBox />\n            </button>\n        </form>\n    );\n};\n\nexport default TodoInsert;","import React from 'react';\nimport {\n  MdCheckBoxOutlineBlank,\n  MdCheckBox,\n  MdIndeterminateCheckBox,\n} from 'react-icons/md';\nimport cn from 'classnames';\nimport './TodoListItem.scss';\n\n\nconst TodoListItem = ({ todo , onRemove , onToggle, style }) => {\n  const { uuid, content, completed } = todo;\n\n  return (\n    <div className=\"TodoListItem-virtualized\" style={style}>\n    <div className=\"TodoListItem\">\n      <div className={cn('checkbox', { completed })}\n       onClick={() => onToggle(uuid, completed)}\n       >\n        {completed ? <MdCheckBox /> : <MdCheckBoxOutlineBlank />}\n        <div className=\"text\">{content}</div>\n      </div>\n      <div className=\"remove\" onClick={() => onRemove(uuid)}>\n        <MdIndeterminateCheckBox />\n      </div>\n    </div>\n    </div>\n  );\n};\n\nexport default React.memo(\n  TodoListItem,\n  (prevProps, nextProps) => prevProps.todo === nextProps.todo,\n);","import React, { useCallback } from 'react';\nimport { List } from 'react-virtualized';\nimport TodoListItem from './TodoListItem';\nimport './TodoList.scss';\n\nconst TodoList = ({ todos, onRemove, onToggle }) => {\n  const rowRenderer = useCallback(\n    ({ index, key, style }) => {\n      const todo = todos[index];\n      return(\n        <TodoListItem\n        todo={todo}\n        key={key}\n        onRemove={onRemove}\n        onToggle={onToggle}\n        style={style}\n      />\n      );\n    },\n    [onRemove, onToggle, todos],\n  );\n  return (\n    <List\n    className=\"TodoList\"\n    width={720}\n    height={513}\n    rowCount={todos.length}\n    rowHeight={57}\n    rowRenderer={rowRenderer}\n    list={todos}\n    style={{ outline: 'none' }}\n    />\n  );\n};\n\nexport default React.memo(TodoList);\n","import React, { useState, useCallback, useEffect } from 'react';\nimport TodoTemplate from './component/TodoTemplate';\nimport TodoInsert from './component/TodoInsert';\nimport TodoList from './component/TodoList'\n\n\nconst App = () => {\n  const [todos, setTodos] = useState([]);\n\n  useEffect(() => {\n    const fetchTodos = async () => {\n      const response = await fetch('https://hwitodo.herokuapp.com/api/v1/todos/');\n      const json = await response.json();\n      setTodos(json);\n    }\n    fetchTodos();\n  }, [])\n\n  const onInsert = useCallback(\n    text => {\n      const create = async() => {\n        const rawResponse = await fetch('https://hwitodo.herokuapp.com/api/v1/todos/', {\n          method: 'POST',\n          headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({content: text, completed: false})\n        });\n        const newTodo = await rawResponse.json();\n        setTodos(todos => [...todos, newTodo]);\n      };\n      create()\n    }, []);\n\n  const onRemove = useCallback(\n    uuid => {\n      const remove = async() => {\n            await fetch(`https://hwitodo.herokuapp.com/api/v1/todos/${uuid}/`, {\n              method: 'DELETE',\n              headers: {\n                'Content-Type': 'application/json'\n              },\n            });\n\n            setTodos(todos => todos.filter(todo => todo.uuid !== uuid));\n          };\n          remove()\n        }, []);\n\n  const onToggle = useCallback(\n    (uuid, completed) =>  {\n    const modify = async () => {\n        await fetch(`https://hwitodo.herokuapp.com/api/v1/todos/${uuid}/`, {\n          method: 'PATCH',\n          headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({ completed: !completed })\n        });\n\n        setTodos(todos => \n          todos.map(todo => \n            todo.uuid === uuid ? {...todo, completed: !todo.completed } : todo,\n          ));\n      };\n      modify()\n    }, []);\n\n\n  return (\n    <TodoTemplate>\n      <TodoInsert onInsert={onInsert} />\n      <TodoList todos={todos} onRemove={onRemove} onToggle={onToggle} />\n    </TodoTemplate>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}